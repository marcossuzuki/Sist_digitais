// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/02/2018 21:47:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    somador_paralelo_4bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module somador_paralelo_4bits_vlg_sample_tst(
	A1,
	B1,
	Cin,
	sampler_tx
);
input [3:0] A1;
input [3:0] B1;
input  Cin;
output sampler_tx;

reg sample;
time current_time;
always @(A1 or B1 or Cin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module somador_paralelo_4bits_vlg_check_tst (
	aS71,
	aS72,
	bS71,
	bS72,
	Cout,
	cS71,
	cS72,
	dS71,
	dS72,
	eS71,
	eS72,
	fS71,
	fS72,
	gS71,
	gS72,
	sampler_rx
);
input  aS71;
input  aS72;
input  bS71;
input  bS72;
input  Cout;
input  cS71;
input  cS72;
input  dS71;
input  dS72;
input  eS71;
input  eS72;
input  fS71;
input  fS72;
input  gS71;
input  gS72;
input sampler_rx;

reg  aS71_expected;
reg  aS72_expected;
reg  bS71_expected;
reg  bS72_expected;
reg  Cout_expected;
reg  cS71_expected;
reg  cS72_expected;
reg  dS71_expected;
reg  dS72_expected;
reg  eS71_expected;
reg  eS72_expected;
reg  fS71_expected;
reg  fS72_expected;
reg  gS71_expected;
reg  gS72_expected;

reg  aS71_prev;
reg  aS72_prev;
reg  bS71_prev;
reg  bS72_prev;
reg  Cout_prev;
reg  cS71_prev;
reg  cS72_prev;
reg  dS71_prev;
reg  dS72_prev;
reg  eS71_prev;
reg  eS72_prev;
reg  fS71_prev;
reg  fS72_prev;
reg  gS71_prev;
reg  gS72_prev;

reg  aS71_expected_prev;
reg  aS72_expected_prev;
reg  bS71_expected_prev;
reg  bS72_expected_prev;
reg  Cout_expected_prev;
reg  cS71_expected_prev;
reg  cS72_expected_prev;
reg  dS71_expected_prev;
reg  dS72_expected_prev;
reg  eS71_expected_prev;
reg  eS72_expected_prev;
reg  fS71_expected_prev;
reg  fS72_expected_prev;
reg  gS71_expected_prev;
reg  gS72_expected_prev;

reg  last_aS71_exp;
reg  last_aS72_exp;
reg  last_bS71_exp;
reg  last_bS72_exp;
reg  last_Cout_exp;
reg  last_cS71_exp;
reg  last_cS72_exp;
reg  last_dS71_exp;
reg  last_dS72_exp;
reg  last_eS71_exp;
reg  last_eS72_exp;
reg  last_fS71_exp;
reg  last_fS72_exp;
reg  last_gS71_exp;
reg  last_gS72_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	aS71_prev = aS71;
	aS72_prev = aS72;
	bS71_prev = bS71;
	bS72_prev = bS72;
	Cout_prev = Cout;
	cS71_prev = cS71;
	cS72_prev = cS72;
	dS71_prev = dS71;
	dS72_prev = dS72;
	eS71_prev = eS71;
	eS72_prev = eS72;
	fS71_prev = fS71;
	fS72_prev = fS72;
	gS71_prev = gS71;
	gS72_prev = gS72;
end

// update expected /o prevs

always @(trigger)
begin
	aS71_expected_prev = aS71_expected;
	aS72_expected_prev = aS72_expected;
	bS71_expected_prev = bS71_expected;
	bS72_expected_prev = bS72_expected;
	Cout_expected_prev = Cout_expected;
	cS71_expected_prev = cS71_expected;
	cS72_expected_prev = cS72_expected;
	dS71_expected_prev = dS71_expected;
	dS72_expected_prev = dS72_expected;
	eS71_expected_prev = eS71_expected;
	eS72_expected_prev = eS72_expected;
	fS71_expected_prev = fS71_expected;
	fS72_expected_prev = fS72_expected;
	gS71_expected_prev = gS71_expected;
	gS72_expected_prev = gS72_expected;
end



// expected Cout
initial
begin
	Cout_expected = 1'bX;
end 

// expected aS71
initial
begin
	aS71_expected = 1'bX;
end 

// expected bS71
initial
begin
	bS71_expected = 1'bX;
end 

// expected cS71
initial
begin
	cS71_expected = 1'bX;
end 

// expected dS71
initial
begin
	dS71_expected = 1'bX;
end 

// expected eS71
initial
begin
	eS71_expected = 1'bX;
end 

// expected fS71
initial
begin
	fS71_expected = 1'bX;
end 

// expected gS71
initial
begin
	gS71_expected = 1'bX;
end 

// expected aS72
initial
begin
	aS72_expected = 1'bX;
end 

// expected bS72
initial
begin
	bS72_expected = 1'bX;
end 

// expected cS72
initial
begin
	cS72_expected = 1'bX;
end 

// expected dS72
initial
begin
	dS72_expected = 1'bX;
end 

// expected eS72
initial
begin
	eS72_expected = 1'bX;
end 

// expected fS72
initial
begin
	fS72_expected = 1'bX;
end 

// expected gS72
initial
begin
	gS72_expected = 1'bX;
end 
// generate trigger
always @(aS71_expected or aS71 or aS72_expected or aS72 or bS71_expected or bS71 or bS72_expected or bS72 or Cout_expected or Cout or cS71_expected or cS71 or cS72_expected or cS72 or dS71_expected or dS71 or dS72_expected or dS72 or eS71_expected or eS71 or eS72_expected or eS72 or fS71_expected or fS71 or fS72_expected or fS72 or gS71_expected or gS71 or gS72_expected or gS72)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aS71 = %b | expected aS72 = %b | expected bS71 = %b | expected bS72 = %b | expected Cout = %b | expected cS71 = %b | expected cS72 = %b | expected dS71 = %b | expected dS72 = %b | expected eS71 = %b | expected eS72 = %b | expected fS71 = %b | expected fS72 = %b | expected gS71 = %b | expected gS72 = %b | ",aS71_expected_prev,aS72_expected_prev,bS71_expected_prev,bS72_expected_prev,Cout_expected_prev,cS71_expected_prev,cS72_expected_prev,dS71_expected_prev,dS72_expected_prev,eS71_expected_prev,eS72_expected_prev,fS71_expected_prev,fS72_expected_prev,gS71_expected_prev,gS72_expected_prev);
	$display("| real aS71 = %b | real aS72 = %b | real bS71 = %b | real bS72 = %b | real Cout = %b | real cS71 = %b | real cS72 = %b | real dS71 = %b | real dS72 = %b | real eS71 = %b | real eS72 = %b | real fS71 = %b | real fS72 = %b | real gS71 = %b | real gS72 = %b | ",aS71_prev,aS72_prev,bS71_prev,bS72_prev,Cout_prev,cS71_prev,cS72_prev,dS71_prev,dS72_prev,eS71_prev,eS72_prev,fS71_prev,fS72_prev,gS71_prev,gS72_prev);
`endif
	if (
		( aS71_expected_prev !== 1'bx ) && ( aS71_prev !== aS71_expected_prev )
		&& ((aS71_expected_prev !== last_aS71_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aS71 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aS71_expected_prev);
		$display ("     Real value = %b", aS71_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aS71_exp = aS71_expected_prev;
	end
	if (
		( aS72_expected_prev !== 1'bx ) && ( aS72_prev !== aS72_expected_prev )
		&& ((aS72_expected_prev !== last_aS72_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aS72 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aS72_expected_prev);
		$display ("     Real value = %b", aS72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aS72_exp = aS72_expected_prev;
	end
	if (
		( bS71_expected_prev !== 1'bx ) && ( bS71_prev !== bS71_expected_prev )
		&& ((bS71_expected_prev !== last_bS71_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bS71 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bS71_expected_prev);
		$display ("     Real value = %b", bS71_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bS71_exp = bS71_expected_prev;
	end
	if (
		( bS72_expected_prev !== 1'bx ) && ( bS72_prev !== bS72_expected_prev )
		&& ((bS72_expected_prev !== last_bS72_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bS72 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bS72_expected_prev);
		$display ("     Real value = %b", bS72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bS72_exp = bS72_expected_prev;
	end
	if (
		( Cout_expected_prev !== 1'bx ) && ( Cout_prev !== Cout_expected_prev )
		&& ((Cout_expected_prev !== last_Cout_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout_expected_prev);
		$display ("     Real value = %b", Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Cout_exp = Cout_expected_prev;
	end
	if (
		( cS71_expected_prev !== 1'bx ) && ( cS71_prev !== cS71_expected_prev )
		&& ((cS71_expected_prev !== last_cS71_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cS71 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cS71_expected_prev);
		$display ("     Real value = %b", cS71_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_cS71_exp = cS71_expected_prev;
	end
	if (
		( cS72_expected_prev !== 1'bx ) && ( cS72_prev !== cS72_expected_prev )
		&& ((cS72_expected_prev !== last_cS72_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cS72 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cS72_expected_prev);
		$display ("     Real value = %b", cS72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cS72_exp = cS72_expected_prev;
	end
	if (
		( dS71_expected_prev !== 1'bx ) && ( dS71_prev !== dS71_expected_prev )
		&& ((dS71_expected_prev !== last_dS71_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dS71 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dS71_expected_prev);
		$display ("     Real value = %b", dS71_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_dS71_exp = dS71_expected_prev;
	end
	if (
		( dS72_expected_prev !== 1'bx ) && ( dS72_prev !== dS72_expected_prev )
		&& ((dS72_expected_prev !== last_dS72_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dS72 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dS72_expected_prev);
		$display ("     Real value = %b", dS72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_dS72_exp = dS72_expected_prev;
	end
	if (
		( eS71_expected_prev !== 1'bx ) && ( eS71_prev !== eS71_expected_prev )
		&& ((eS71_expected_prev !== last_eS71_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eS71 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eS71_expected_prev);
		$display ("     Real value = %b", eS71_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_eS71_exp = eS71_expected_prev;
	end
	if (
		( eS72_expected_prev !== 1'bx ) && ( eS72_prev !== eS72_expected_prev )
		&& ((eS72_expected_prev !== last_eS72_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eS72 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eS72_expected_prev);
		$display ("     Real value = %b", eS72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_eS72_exp = eS72_expected_prev;
	end
	if (
		( fS71_expected_prev !== 1'bx ) && ( fS71_prev !== fS71_expected_prev )
		&& ((fS71_expected_prev !== last_fS71_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fS71 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fS71_expected_prev);
		$display ("     Real value = %b", fS71_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_fS71_exp = fS71_expected_prev;
	end
	if (
		( fS72_expected_prev !== 1'bx ) && ( fS72_prev !== fS72_expected_prev )
		&& ((fS72_expected_prev !== last_fS72_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fS72 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fS72_expected_prev);
		$display ("     Real value = %b", fS72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_fS72_exp = fS72_expected_prev;
	end
	if (
		( gS71_expected_prev !== 1'bx ) && ( gS71_prev !== gS71_expected_prev )
		&& ((gS71_expected_prev !== last_gS71_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gS71 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gS71_expected_prev);
		$display ("     Real value = %b", gS71_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_gS71_exp = gS71_expected_prev;
	end
	if (
		( gS72_expected_prev !== 1'bx ) && ( gS72_prev !== gS72_expected_prev )
		&& ((gS72_expected_prev !== last_gS72_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gS72 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gS72_expected_prev);
		$display ("     Real value = %b", gS72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_gS72_exp = gS72_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module somador_paralelo_4bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A1;
reg [3:0] B1;
reg Cin;
// wires                                               
wire aS71;
wire aS72;
wire bS71;
wire bS72;
wire Cout;
wire cS71;
wire cS72;
wire dS71;
wire dS72;
wire eS71;
wire eS72;
wire fS71;
wire fS72;
wire gS71;
wire gS72;

wire sampler;                             

// assign statements (if any)                          
somador_paralelo_4bits i1 (
// port map - connection between master ports and signals/registers   
	.A1(A1),
	.aS71(aS71),
	.aS72(aS72),
	.B1(B1),
	.bS71(bS71),
	.bS72(bS72),
	.Cin(Cin),
	.Cout(Cout),
	.cS71(cS71),
	.cS72(cS72),
	.dS71(dS71),
	.dS72(dS72),
	.eS71(eS71),
	.eS72(eS72),
	.fS71(fS71),
	.fS72(fS72),
	.gS71(gS71),
	.gS72(gS72)
);
// A1[ 3 ]
initial
begin
	repeat(6)
	begin
		A1[3] = 1'b0;
		A1[3] = #80000 1'b1;
		# 80000;
	end
	A1[3] = 1'b0;
end 
// A1[ 2 ]
initial
begin
	repeat(12)
	begin
		A1[2] = 1'b0;
		A1[2] = #40000 1'b1;
		# 40000;
	end
	A1[2] = 1'b0;
end 
// A1[ 1 ]
always
begin
	A1[1] = 1'b0;
	A1[1] = #20000 1'b1;
	#20000;
end 
// A1[ 0 ]
always
begin
	A1[0] = 1'b0;
	A1[0] = #10000 1'b1;
	#10000;
end 
// B1[ 3 ]
initial
begin
	B1[3] = 1'b0;
end 
// B1[ 2 ]
initial
begin
	B1[2] = 1'b0;
end 
// B1[ 1 ]
initial
begin
	B1[1] = 1'b0;
end 
// B1[ 0 ]
initial
begin
	B1[0] = 1'b0;
end 

// Cin
initial
begin
	Cin = 1'b0;
end 

somador_paralelo_4bits_vlg_sample_tst tb_sample (
	.A1(A1),
	.B1(B1),
	.Cin(Cin),
	.sampler_tx(sampler)
);

somador_paralelo_4bits_vlg_check_tst tb_out(
	.aS71(aS71),
	.aS72(aS72),
	.bS71(bS71),
	.bS72(bS72),
	.Cout(Cout),
	.cS71(cS71),
	.cS72(cS72),
	.dS71(dS71),
	.dS72(dS72),
	.eS71(eS71),
	.eS72(eS72),
	.fS71(fS71),
	.fS72(fS72),
	.gS71(gS71),
	.gS72(gS72),
	.sampler_rx(sampler)
);
endmodule

