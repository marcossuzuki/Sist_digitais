// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/02/2018 20:28:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decoder_BCD_7seg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoder_BCD_7seg_vlg_sample_tst(
	A,
	B,
	C,
	D,
	sampler_tx
);
input  A;
input  B;
input  C;
input  D;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or D)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decoder_BCD_7seg_vlg_check_tst (
	aS7,
	bS7,
	cS7,
	dS7,
	eS7,
	fS7,
	gS7,
	sampler_rx
);
input  aS7;
input  bS7;
input  cS7;
input  dS7;
input  eS7;
input  fS7;
input  gS7;
input sampler_rx;

reg  aS7_expected;
reg  bS7_expected;
reg  cS7_expected;
reg  dS7_expected;
reg  eS7_expected;
reg  fS7_expected;
reg  gS7_expected;

reg  aS7_prev;
reg  bS7_prev;
reg  cS7_prev;
reg  dS7_prev;
reg  eS7_prev;
reg  fS7_prev;
reg  gS7_prev;

reg  aS7_expected_prev;
reg  bS7_expected_prev;
reg  cS7_expected_prev;
reg  dS7_expected_prev;
reg  eS7_expected_prev;
reg  fS7_expected_prev;
reg  gS7_expected_prev;

reg  last_aS7_exp;
reg  last_bS7_exp;
reg  last_cS7_exp;
reg  last_dS7_exp;
reg  last_eS7_exp;
reg  last_fS7_exp;
reg  last_gS7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	aS7_prev = aS7;
	bS7_prev = bS7;
	cS7_prev = cS7;
	dS7_prev = dS7;
	eS7_prev = eS7;
	fS7_prev = fS7;
	gS7_prev = gS7;
end

// update expected /o prevs

always @(trigger)
begin
	aS7_expected_prev = aS7_expected;
	bS7_expected_prev = bS7_expected;
	cS7_expected_prev = cS7_expected;
	dS7_expected_prev = dS7_expected;
	eS7_expected_prev = eS7_expected;
	fS7_expected_prev = fS7_expected;
	gS7_expected_prev = gS7_expected;
end



// expected aS7
initial
begin
	aS7_expected = 1'bX;
end 

// expected bS7
initial
begin
	bS7_expected = 1'bX;
end 

// expected cS7
initial
begin
	cS7_expected = 1'bX;
end 

// expected dS7
initial
begin
	dS7_expected = 1'bX;
end 

// expected eS7
initial
begin
	eS7_expected = 1'bX;
end 

// expected fS7
initial
begin
	fS7_expected = 1'bX;
end 

// expected gS7
initial
begin
	gS7_expected = 1'bX;
end 
// generate trigger
always @(aS7_expected or aS7 or bS7_expected or bS7 or cS7_expected or cS7 or dS7_expected or dS7 or eS7_expected or eS7 or fS7_expected or fS7 or gS7_expected or gS7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aS7 = %b | expected bS7 = %b | expected cS7 = %b | expected dS7 = %b | expected eS7 = %b | expected fS7 = %b | expected gS7 = %b | ",aS7_expected_prev,bS7_expected_prev,cS7_expected_prev,dS7_expected_prev,eS7_expected_prev,fS7_expected_prev,gS7_expected_prev);
	$display("| real aS7 = %b | real bS7 = %b | real cS7 = %b | real dS7 = %b | real eS7 = %b | real fS7 = %b | real gS7 = %b | ",aS7_prev,bS7_prev,cS7_prev,dS7_prev,eS7_prev,fS7_prev,gS7_prev);
`endif
	if (
		( aS7_expected_prev !== 1'bx ) && ( aS7_prev !== aS7_expected_prev )
		&& ((aS7_expected_prev !== last_aS7_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aS7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aS7_expected_prev);
		$display ("     Real value = %b", aS7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aS7_exp = aS7_expected_prev;
	end
	if (
		( bS7_expected_prev !== 1'bx ) && ( bS7_prev !== bS7_expected_prev )
		&& ((bS7_expected_prev !== last_bS7_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bS7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bS7_expected_prev);
		$display ("     Real value = %b", bS7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bS7_exp = bS7_expected_prev;
	end
	if (
		( cS7_expected_prev !== 1'bx ) && ( cS7_prev !== cS7_expected_prev )
		&& ((cS7_expected_prev !== last_cS7_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cS7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cS7_expected_prev);
		$display ("     Real value = %b", cS7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cS7_exp = cS7_expected_prev;
	end
	if (
		( dS7_expected_prev !== 1'bx ) && ( dS7_prev !== dS7_expected_prev )
		&& ((dS7_expected_prev !== last_dS7_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dS7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dS7_expected_prev);
		$display ("     Real value = %b", dS7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_dS7_exp = dS7_expected_prev;
	end
	if (
		( eS7_expected_prev !== 1'bx ) && ( eS7_prev !== eS7_expected_prev )
		&& ((eS7_expected_prev !== last_eS7_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eS7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eS7_expected_prev);
		$display ("     Real value = %b", eS7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_eS7_exp = eS7_expected_prev;
	end
	if (
		( fS7_expected_prev !== 1'bx ) && ( fS7_prev !== fS7_expected_prev )
		&& ((fS7_expected_prev !== last_fS7_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fS7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fS7_expected_prev);
		$display ("     Real value = %b", fS7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_fS7_exp = fS7_expected_prev;
	end
	if (
		( gS7_expected_prev !== 1'bx ) && ( gS7_prev !== gS7_expected_prev )
		&& ((gS7_expected_prev !== last_gS7_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gS7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gS7_expected_prev);
		$display ("     Real value = %b", gS7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_gS7_exp = gS7_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decoder_BCD_7seg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
// wires                                               
wire aS7;
wire bS7;
wire cS7;
wire dS7;
wire eS7;
wire fS7;
wire gS7;

wire sampler;                             

// assign statements (if any)                          
decoder_BCD_7seg i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.aS7(aS7),
	.B(B),
	.bS7(bS7),
	.C(C),
	.cS7(cS7),
	.D(D),
	.dS7(dS7),
	.eS7(eS7),
	.fS7(fS7),
	.gS7(gS7)
);

// A
initial
begin
	repeat(6)
	begin
		A = 1'b0;
		A = #80000 1'b1;
		# 80000;
	end
	A = 1'b0;
end 

// B
initial
begin
	repeat(12)
	begin
		B = 1'b0;
		B = #40000 1'b1;
		# 40000;
	end
	B = 1'b0;
end 

// C
always
begin
	C = 1'b0;
	C = #20000 1'b1;
	#20000;
end 

// D
always
begin
	D = 1'b0;
	D = #10000 1'b1;
	#10000;
end 

decoder_BCD_7seg_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.sampler_tx(sampler)
);

decoder_BCD_7seg_vlg_check_tst tb_out(
	.aS7(aS7),
	.bS7(bS7),
	.cS7(cS7),
	.dS7(dS7),
	.eS7(eS7),
	.fS7(fS7),
	.gS7(gS7),
	.sampler_rx(sampler)
);
endmodule

